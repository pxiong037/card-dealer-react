{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","imgUrl","alt","Component","Deck","state","deckId","remaining","cards","handleClick","bind","axios","get","response","data","console","log","setState","deck_id","success","Error","st","alert","map","card","images","png","value","suit","key","code","role","aria-label","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qXAmBeA,G,wDAfd,WAAYC,GAAQ,IAAD,sBAClB,cAAMA,GACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJd,OAKlB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALkB,E,qDASlB,OACC,yBAAKM,MAAO,CAACC,UAAWC,KAAKH,YAAaI,UAAU,OAAOC,IAAKF,KAAKT,MAAMY,OAAQC,IAAKJ,KAAKT,MAAMa,U,GAXnFC,cC0DJC,G,wDAtDd,WAAYf,GAAO,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACZC,OAAQ,GACRC,UAAW,EACXC,MAAO,IAGR,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,kMAYIC,IAAMC,IAAN,UAfF,sCAeE,iB,OAAjBC,E,OACAC,EAAOD,EAASC,KACpBC,QAAQC,IAAIF,GACZhB,KAAKmB,SAAS,CACbX,OAAQQ,EAAKI,QACbX,UAAWO,EAAKP,Y,qRAMKI,IAAMC,IAAN,UA1BH,sCA0BG,YAA6Bd,KAAKO,MAAMC,OAAxC,W,UAAjBO,E,QACAC,EAAOD,EAASC,MACXK,Q,sBACF,IAAIC,MAAM,sB,OAEjBtB,KAAKmB,UAAS,SAAAI,GAAE,MAAK,CACpBd,UAAWO,EAAKP,UAChBC,MAAM,GAAD,mBAAMa,EAAGb,OAAT,CAAgBM,EAAKN,MAAM,S,kDAGjCc,MAAM,EAAD,I,+IAMN,IAAId,EACHV,KAAKO,MAAMG,MAAMe,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAMvB,OAAQuB,EAAKC,OAAOC,IAAKxB,IAAG,UAAKsB,EAAKG,MAAV,eAAsBH,EAAKI,MAAQC,IAAKL,EAAKM,UAEjF,OACC,yBAAK/B,UAAU,QACd,wBAAIA,UAAU,cAAa,0BAAMgC,KAAK,MAAMC,aAAW,WAA5B,gBAA3B,gBAAwFlC,KAAKO,MAAME,UAAnG,mBAA6H,0BAAMwB,KAAK,MAAMC,aAAW,WAA5B,iBAC7H,wBAAIjC,UAAU,uBAAsB,0BAAMgC,KAAK,MAAMC,aAAW,WAA5B,gBAApC,gCAAgH,0BAAMD,KAAK,MAAMC,aAAW,WAA5B,iBAChH,4BAAQjC,UAAU,WAAWkC,QAASnC,KAAKW,aAA3C,iBACA,yBAAKV,UAAU,kBAAkBS,Q,GAjDlBL,cCMJ+B,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.fff8082a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Card.css';\n\nclass Card extends Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet angle = Math.random() * 90 - 45;\n\t\tlet xPos = Math.random() * 40 - 20;\n\t\tlet yPos = Math.random() * 40 - 20;\n\t\tthis._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n\t}\n\t\n\trender(){ \n\t\treturn(\n\t\t\t<img style={{transform: this._transform}} className=\"Card\" src={this.props.imgUrl} alt={this.props.alt}/>\n\t\t);\n\t}\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport './Deck.css';\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\nclass Deck extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdeckId: '',\n\t\t\tremaining: 0,\n\t\t\tcards: []\n\t\t};\n\t\t\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\t\n\tasync componentDidMount(){\n\t\tlet response = await axios.get(`${API_BASE_URL}/new/shuffle`);\n\t\tlet data = response.data;\n\t\tconsole.log(data);\n\t\tthis.setState({\n\t\t\tdeckId: data.deck_id,\n\t\t\tremaining: data.remaining\n\t\t});\n\t}\n\t\n\tasync handleClick(){\n\t\ttry {\n\t\t\tlet response = await axios.get(`${API_BASE_URL}/${this.state.deckId}/draw/`);\n\t\t\tvar data = response.data;\n\t\t\tif(!data.success){\n\t\t\t\tthrow new Error(\"No cards remaining\");\n\t\t\t}\n\t\t\tthis.setState(st => ({\n\t\t\t\tremaining: data.remaining,\n\t\t\t\tcards: [...st.cards, data.cards[0]]\n\t\t\t}));\n\t\t} catch(err){\n\t\t\talert(err);\n\t\t}\n\t\t\n\t}\n\t\n\trender(){\n\t\tlet cards = \n\t\t\tthis.state.cards.map(card => (\n\t\t\t\t<Card imgUrl={card.images.png} alt={`${card.value} of ${card.suit}`} key={card.code}/>\n\t\t\t));\n\t\treturn(\n\t\t\t<div className='Deck'>\n\t\t\t\t<h1 className='Deck-title'><span role=\"img\" aria-label=\"diamond\">♦️</span>Card Dealer: {this.state.remaining} cards remaining<span role=\"img\" aria-label=\"diamond\">♦️</span></h1>\n\t\t\t\t<h2 className='Deck-title subtitle'><span role=\"img\" aria-label=\"diamond\">♦️</span>A little demo made with React<span role=\"img\" aria-label=\"diamond\">♦️</span></h2>\n\t\t\t\t<button className='Deck-btn' onClick={this.handleClick}>Gimme A Card!</button>\n\t\t\t\t<div className=\"Deck-card-area\">{cards}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Deck;","import React from 'react';\nimport './App.css';\nimport Deck from './Deck';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}